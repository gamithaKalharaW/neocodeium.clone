*NeoCodeium*           free AI completion plugin powered by codeium

Author: monkoose <https://github.com/monkoose>
License: MIT license

==============================================================================
CONTENTS

    Introduction                                   |NeoCodeium-Introduction|
    Installation                                   |NeoCodeium-Installation|
    Usage                                          |NeoCodeium-Usage|
        API                                        |NeoCodeium-API|
        Commands                                   |NeoCodeium-Commands|
        Keymaps                                    |NeoCodeium-Keymaps|
        Highlight groups                           |NeoCodeium-Highlights|
        Using with nvim-cmp
    Configuration                                  |NeoCodeium-Configuration|
    Logging                                        |NeoCodeium-Logging|

==============================================================================
INTRODUCTION                                         *NeoCodeium-Introduction*

|NeoCodeium| is an AI completion plugin powered by https://codeium.com/ toolkit.
It spawns codeium server and sends requests to it to get so called completion
items, which are rendered as virtual text and can span multiple lines.
|NeoCodeium| parses loaded buffers on BufEnter autocmd to improve the quality
of suggested items.

==============================================================================
INSTALLATION                                         *NeoCodeium-Installation*

Hereâ€™s an example for `lazy`ðŸ’¤ https://github.com/folke/lazy.nvim plugin
manager. If you're using a different plugin manager, please refer to its
documentation for installation instructions.
>lua
    -- add this to the file where you setup your other plugins:
    {
    "monkoose/neocodeium",
    event = "VeryLazy",
    config = function()
        local neocodeium = require("neocodeium")
        neocodeium.setup()
        vim.keymap.set("i", "<A-f>", neocodeium.accept)
    end,
    }
<
Now you can use `Alt-f` in insert mode to accept codeium suggestions.
Note: To obtain an API token, youâ€™ll need to run `:NeoCodeium auth` command.

==============================================================================
USAGE                                                       *NeoCodeium-Usage*

------------------------------------------------------------------------------
API                                                           *NeoCodeium-API*

|NeoCodeium| provides API functions exported in `neocodeium` module.
>lua
    local neocodeium = require("neocodeium")

    -- Accepts the suggestion.
    neocodeium.accept()

    -- Accepts only part of the suggestion if the full suggestion doesn't make
    -- sense.
    neocodeium.accept_word()
    neocodeium.accept_line()

    -- Clears the current suggestion.
    neocodeium.clear()

    -- Cycles through suggestions by `n` (1 by default) items. Use a negative
    -- value to cycle in reverse order.
    neocodeium.cycle(n)

    -- Same as `cycle()`, but also tries to show suggestions if none is
    -- visible. Mostly useful with the enabled `manual` option.
    neocodeium.cycle_or_complete(n)

    -- Checks if codeium suggestion is shown or not
    neocodeium.visible()
<
------------------------------------------------------------------------------
COMMANDS                                                 *NeoCodeium-Commands*


|NeoCodeium| provides `:NeoCodeium` user command, which has some useful actions:
    auth~
        Authenticates the user and saves the API token.
    disable~
        Disables NeoCodeium completion.
    enable~
        Enables NeoCodeium completion.
    toggle~
        Toggles NeoCodeium completion.
    disable_buffer~
        Disables NeoCodeium completion in the current buffer.
    enable_buffer~
        Enables NeoCodeium completion in the current buffer.
    open_log~
        Opens new tab with the log output. Read |NeoCodeium-Logging| for more
        information about logging.
    restart~
        Restarts Codeium server. Useful when server stops responding for any
        reason.

You can also use such commands in your lua scripts:
>lua
    local cmds = require("neocodeium.commands")
    cmds.auth()
    cmds.disable()
    cmds.enable()
    cmds.toggle()
    cmds.disable_buffer()
    cmds.enable_buffer()
    cmds.open_log()
    cmds.restart()
<
------------------------------------------------------------------------------
KEYMAPS                                                  *NeoCodeium-Keymaps*

NeoCodeium doesnâ€™t enforce any keymaps, which means youâ€™ll need to add them
yourself. `codeium.vim` and `copilot.vim` set `<Tab>` keymap as the default
key for accepting a suggestion, but `<Tab>` has some downsides to consider
(but nothing stops you from using it):
>
    - Thereâ€™s a high chance of it conflicting with other plugins (such as
      snippets, nvim-cmp, etc.).
    - It doesnâ€™t work in the `:h command-line-window`.
    - It is harder to indent with the tab at the start of a line.

Suggested keymaps:
>lua
    vim.keymap.set("i", "<A-f>", function()
        require("neocodeium").accept()
    end)
    vim.keymap.set("i", "<A-w>", function()
        require("neocodeium").accept_word()
    end)
    vim.keymap.set("i", "<A-a>", function()
        require("neocodeium").accept_line()
    end)
    vim.keymap.set("i", "<A-e>", function()
        require("neocodeium").cycle_or_complete()
    end)
    vim.keymap.set("i", "<A-r>", function()
        require("neocodeium").cycle_or_complete(-1)
    end)
    vim.keymap.set("i", "<A-c>", function()
        require("neocodeium").clear()
    end)
<
------------------------------------------------------------------------------
HIGHLIGHT GROUPS                                       *NeoCodeium-Highlights*

|NeoCodeium| offers a couple of highlight groups. Feel free to adjust them to
your preference and to match your chosen color scheme:
    NeoCodeiumSuggestion~
        Virtual text color of the plugin suggestions.
        Default: `#808080`
    NeoCodeiumLabel~
        Color of the label that indicates the number of suggestions.
        Default: `inverted` |hl-DiagnosticInfo|.

------------------------------------------------------------------------------
USING WITH NVIM-CMP

If you are using NeoCodeium with `manual = false` (it is default), it is
useful to set nvim-cmp to manual completion and clear NeoCodeium suggestions
on opening nvim-cmp popup menu. You can achieve this with following code in
the place where nvim-cmp is configured:
>lua
    local cmp = require("cmp")
    local neocodeium = require("neocodeium")
    local commands = require("neocodeium.commands")

    cmp.event:on("menu_opened", function()
        commands.disable()
        neocodeium.clear()
    end)

    cmp.event:on("menu_closed", function()
        commands.enable()
    end)

    cmp.setup({
        completion = {
            autocomplete = false,
        },
    })
<
==============================================================================
CONFIGURATION                                       *NeoCodeium-Configuration*

`setup()` function accepts a table with the following keys:
    enabled~
        Boolean.
        When `true`, then the plugin will be enabled on neovim startup.
    bin~
        String.
        Path to a custom Codeium server binary.
        You can download a specific version from codeium github page
        https://github.com/Exafunction/codeium/releases
    manual~
        Boolean.
        When `true`, then automatic display of suggestions is disabled.
        Use |cycle_or_complete()| to show one manually.
    server~
        Table with keys:
            api_url~
                String.
                API url to use with Enterprise mode.
            portal_url~
                String.
                Portal url to use for registering a user and downloading the
                server binary.
        Information about the API server to use.
    show_label~
        Boolean.
        When `true`, then the label with the number of suggestions is showing
        at the line column.
    debounce~
        Boolean.
        When `true`, then showing of suggestions is debounced.
    max_lines~
        Integer.
        Maximum number of lines of loaded buffers parsed by the plugin and
        send with a request to the server to make suggestion to be more
        context aware. Can be slow on big files, so it better to limit it to
        some value. Current buffer is always fully parsed.
        When `0` parsing is disabled (this may result in lower-quality
        suggestions).
        When `-1` all lines would be parsed.
    silent~
        Boolean.
        When `true`, then some information messages like "Neocodeium: server
        started..." would be disabled.
    filetypes~
        Table where keys are filetypes and values are booleans.
        By default the plugin is enabled for all filetypes except defaults
        mentioned below. To disable NeoCodeium in additional filetypes set
        them in this table with a `false` value.


Defaults: >lua
    require("neocodeium").setup({
        enabled = true,
        bin = nil,
        manual = false,
        server = {},
        show_label = true,
        debounce = false,
        max_lines = 10000,
        silent = false,
        filetypes = {
            help = false,
            gitcommit = false,
            gitrebase = false,
            ["."] = false,
        },
    })
<
==============================================================================
LOGGING                                                   *NeoCodeium-Logging*

While running NeoCodeium logs some messages into a temporary file, which can
be viewed with the `:NeoCodeium open_log` command. By default, only errors and
warnings are logged.

You can set the logging level to one of `trace`, `debug`, `info`, `warn` or
`error` by exporting the `NEOCODEIUM_LOG_LEVEL` environment variable.

Example: >sh
    NEOCODEIUM_LOG_LEVEL=info nvim
<
==============================================================================
vim:tw=78:ft=help:norl:fen:
